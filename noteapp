#include "noteapp.h"
#include <QVBoxLayout>
#include <QColor>
#include <QCryptographicHash>
#include <QDataStream>
#include <QByteArray>

NoteApp::NoteApp(QWidget *parent)
    : QMainWindow(parent), textEdit(new QTextEdit(this)), reminderTimer(new QTimer(this)) {
    setCentralWidget(textEdit);

    // Menu Bar
    QMenuBar *menuBar = new QMenuBar(this);
    setMenuBar(menuBar);

    // File Menu
    QMenu *fileMenu = menuBar->addMenu("File");
    QAction *newFileAction = new QAction("New", this);
    QAction *openFileAction = new QAction("Open...", this);
    QAction *saveFileAction = new QAction("Save...", this);
    QAction *exitAction = new QAction("Exit", this);
    connect(newFileAction, &QAction::triggered, this, &NoteApp::newFile);
    connect(openFileAction, &QAction::triggered, this, &NoteApp::openFile);
    connect(saveFileAction, &QAction::triggered, this, &NoteApp::saveFile);
    connect(exitAction, &QAction::triggered, this, &QMainWindow::close);
    fileMenu->addAction(newFileAction);
    fileMenu->addAction(openFileAction);
    fileMenu->addAction(saveFileAction);
    fileMenu->addSeparator();
    fileMenu->addAction(exitAction);

    // Edit Menu
    QMenu *editMenu = menuBar->addMenu("Edit");
    QAction *copyAction = new QAction("Copy", this);
    QAction *pasteAction = new QAction("Paste", this);
    QAction *cutAction = new QAction("Cut", this);
    connect(copyAction, &QAction::triggered, textEdit, &QTextEdit::copy);
    connect(pasteAction, &QAction::triggered, textEdit, &QTextEdit::paste);
    connect(cutAction, &QAction::triggered, textEdit, &QTextEdit::cut);
    editMenu->addAction(copyAction);
    editMenu->addAction(pasteAction);
    editMenu->addAction(cutAction);

    // Format Menu
    QMenu *formatMenu = menuBar->addMenu("Format");
    QAction *fontColorAction = new QAction("Font Color", this);
    QAction *backgroundColorAction = new QAction("Background Color", this);
    QAction *boldAction = new QAction("Bold", this);
    QAction *italicAction = new QAction("Italic", this);
    QAction *underlineAction = new QAction("Underline", this);
    connect(fontColorAction, &QAction::triggered, this, &NoteApp::setFontColor);
    connect(backgroundColorAction, &QAction::triggered, this, &NoteApp::setBackgroundColor);
    connect(boldAction, &QAction::triggered, this, &NoteApp::setBold);
    connect(italicAction, &QAction::triggered, this, &NoteApp::setItalic);
    connect(underlineAction, &QAction::triggered, this, &NoteApp::setUnderline);
    formatMenu->addAction(fontColorAction);
    formatMenu->addAction(backgroundColorAction);
    formatMenu->addSeparator();
    formatMenu->addAction(boldAction);
    formatMenu->addAction(italicAction);
    formatMenu->addAction(underlineAction);

    // Tools Menu
    QMenu *toolsMenu = menuBar->addMenu("Tools");
    QAction *encryptAction = new QAction("Encrypt Note", this);
    QAction *decryptAction = new QAction("Decrypt Note", this);
    QAction *setReminderAction = new QAction("Set Reminder", this);
    connect(encryptAction, &QAction::triggered, this, &NoteApp::encryptNoteContent);
    connect(decryptAction, &QAction::triggered, this, &NoteApp::decryptNoteContent);
    connect(setReminderAction, &QAction::triggered, this, &NoteApp::setReminder);
    toolsMenu->addAction(encryptAction);
    toolsMenu->addAction(decryptAction);
    toolsMenu->addSeparator();
    toolsMenu->addAction(setReminderAction);

    connect(reminderTimer, &QTimer::timeout, this, &NoteApp::showReminder);
}

NoteApp::~NoteApp() {}

void NoteApp::newFile() {
    textEdit->clear();
}

void NoteApp::openFile() {
    QString fileName = QFileDialog::getOpenFileName(this, "Open File", "", "All Files (*);;Text Files (*.txt)");
    if (!fileName.isEmpty()) {
        QFile file(fileName);
        if (file.open(QIODevice::ReadOnly | QIODevice::Text)) {
            textEdit->setPlainText(file.readAll());
        } else {
            QMessageBox::warning(this, "Error", "Failed to open file!");
        }
    }
}

void NoteApp::saveFile() {
    QString fileName = QFileDialog::getSaveFileName(this, "Save File", "", "All Files (*);;Text Files (*.txt)");
    if (!fileName.isEmpty()) {
        QFile file(fileName);
        if (file.open(QIODevice::WriteOnly | QIODevice::Text)) {
            QTextStream out(&file);
            out << textEdit->toPlainText();
            file.close();
        } else {
            QMessageBox::warning(this, "Error", "Failed to save file!");
        }
    }
}

void NoteApp::setFontColor() {
    QColor color = QColorDialog::getColor(Qt::black, this, "Select Font Color");
    if (color.isValid()) {
        textEdit->setTextColor(color);
    }
}

void NoteApp::setBackgroundColor() {
    QColor color = QColorDialog::getColor(Qt::white, this, "Select Background Color");
    if (color.isValid()) {
        QPalette palette = textEdit->palette();
        palette.setColor(QPalette::Base, color);
        textEdit->setPalette(palette);
    }
}

void NoteApp::setBold() {
    QFont font = textEdit->font();
    font.setBold(!font.bold());
    textEdit->setFont(font);
}

void NoteApp::setItalic() {
    QFont font = textEdit->font();
    font.setItalic(!font.italic());
    textEdit->setFont(font);
}

void NoteApp::setUnderline() {
    QFont font = textEdit->font();
    font.setUnderline(!font.underline());
    textEdit->setFont(font);
}

void NoteApp::encryptNoteContent() {
    QByteArray key = generateKey();
    QByteArray data = textEdit->toPlainText().toUtf8();
    QByteArray encryptedData = QCryptographicHash::hash(data, QCryptographicHash::Sha256);
    textEdit->setPlainText(encryptedData.toBase64());
}

void NoteApp::decryptNoteContent() {
    QByteArray key = generateKey();
    QByteArray encryptedData = QByteArray::fromBase64(textEdit->toPlainText().toUtf8());
    QByteArray decryptedData = QCryptographicHash::hash(encryptedData, QCryptographicHash::Sha256);
    textEdit->setPlainText(QString(decryptedData));
}

QByteArray NoteApp::generateKey() {
    QByteArray key;
    QBuffer buffer(&key);
    buffer.open(QIODevice::WriteOnly);
    QDataStream stream(&buffer);
    stream << QDateTime::currentDateTime();
    buffer.close();
    return key;
}

void NoteApp::setReminder() {
    bool ok;
    QString text = QInputDialog::getText(this, tr("Set Reminder"),
                                         tr("Enter reminder text:"), QLineEdit::Normal,
                                         "", &ok);
    if (ok && !text.isEmpty()) {
        reminderText = text;
        QDateTime dateTime = QDateTime::currentDateTime().addSecs(10); // Set reminder for 10 seconds later
        qint64 msecs = QDateTime::currentDateTime().msecsTo(dateTime);
        reminderTimer->start(msecs);
    }
}

void NoteApp::showReminder() {
    reminderTimer->stop();
    QMessageBox::information(this, "Reminder", reminderText);
}
